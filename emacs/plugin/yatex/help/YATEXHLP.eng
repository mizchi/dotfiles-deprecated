%%%
%%% YaTeX-LaTeX Help File(c)HIROSE Yuuji [yuuji@yatex.org]
%%% You can translate this file for any device other than YaTeX via
%%% any filter program.  But it is not allowed to remove copyright
%%% notice and any existing dictionary entiries which describes the
%%% source of this file.
%%%

textfloatsep
\addtolength{\textfloatsep}{LENGTH}
Length between the text and a float at the top or bottom of page

floatsep
\addtolength{\floatsep}{LENGTH}
Length between two floats

oddsidemargin
\setlength{\oddsidemargin}{LENGTH}
Length between text and a line 1 inch from the left of page, on the
right page


pagestyle
\pagestyle{STYLE}
Determines header and footer styles on output page.  There are the
following styles
plain		Standard style.  Page number only in footer.
empty		No headers or footers are output.
headings	Puts page number and headings according to section in header.
			No footer is output.
myheadings	User defines what goes into headings using \markbpth and \markright

thispagestyle
\thispagestyle{STYLE}
Determines the STYLE for the current page only

pagenumbering
\pagenumbering{STYLE}
Determines the STYLE of page numbers.  Type of STYLEs are,
arabic		arabic numerals
alph		lowercase alphabets
Alph		uppercase alphabets
roman		lowercase roman numerals
Roman		uppercase roman numerals

shortstack
\shortstack[POSITION]{TEXT\\TO BE\\STACKED}
Stack and display contents within {}, separated by \\.
Possible [POSITION]s are, l(left), c(center), r(right).

newlength
\newlength{NAME}
Declare NAME as a length command.

addtolength
\addtolength{LENGTH COMMAND}{VALUE}
Adds VALUE to LENGTH COMMAND.
See \setlength for major style parameters.

setlength
\setlength{LENGTH COMMAND}{VALUE}
Set the value of LENGTH COMMAND to VALUE.
Major style parameters are:
(Style parameters must be changed in the preamble)
\evensidemargin	\footheight	\footskip	\headheight
\headsep	\marginparsep	\marginparwidth	\oddsidemargin
\textheight	\textwidth	\topmargin	\topskip
\parindent	\baselineskip	\baselinestretch \parskip
\columnsep	\columnseprule	\mathindent

settowidth{\NAME}{TEXT}
Set the value of \NAME to the width of \hbox{TEXT}.

evensidemargin
\setlength{\evensidemargin}{LENGTH}
Length between body and a line 1 inch from the left of page, on the
left page.

footheight
\setlength{\footheight}{LENGTH}
Height of footer.

footskip
\setlength{\footskip}{LENGTH}
Length between bottom of body and footer.

headheight
\addtolength{\headheight}{LENGTH}
Height of header.

headsep
\setlength{\headsep}{LENGTH}
Length between top of body and header.

marginparsep
\addtolength{\marginparsep}{LENGTH}
Length between the body and marginal notes

marginparwidth
\addtolength{\marginparwidth}{LENGTH}
Width of marginal notes.

oddsidemargin
\addtolength{\oddsidemargin}{LENGTH}
Length between body and a line 1 inch from the left of page, on the
right page.


textheight
\addtolength{\textheight}{LENGTH}
Height of text.

textwidth
\addtolength{\textwidth}{LENGTH}
Width of body.

topmargin
\addtolength{\topmargin}{LENGTH}
Length between the header and a line one inch from the top of the page.

topskip
\addtolength{\topskip}{LENGTH}
Length between top of the body to the first line of the text.

parindent
\setlength{\parindent}{LENGTH}
Width of indentation at the beginning of a paragraph.

linewidth
\addtolength{\linewidth}{LENGTH}
Width of lines.

baselineskip
\addtolength{baselineskip}{LENGTH}
Minimum height between baselines (bottom of a line).

baselinestretch
\renewcommand{baselinestretch}{1.5}
Value to multiply \baselineskip.  (default is 1)
(* Redefine using \renewcommand.  Don't use \setlength.

parskip
\addtolength{\parskip}{LENGTH}
Vertical space before a paragraph.

columnsep
\addtolength{\columnsep}{LENGTH}
Width between columns in a two column environment.

columnseprule
\addtolength{\columnseprule}{LENGTH}
Width of ruler to separate columns in a two column environment.
(default is 0pt)

columnwidth
\addtolength{\columnwidth}{LENGTH}
(\textwidth - \columnsep)/2 in a two column environment.
Otherwise, equal to \textwidth.

mathindent
\addtolength{mathindent}{LENGTH}
Width of indentation of a equation from the left margin, when fleqn is
defined as style option.

LaTeX
\LaTeX
Display \LaTeX logo. Definition of \LaTeX is;
\def\LaTeX{{\rm L\kern-.36em\raise.3ex\hbox{\sc a}\kern-.15em
    T\kern-.1667em\lower.7ex\hbox{E}\kern-.125emX}}

fragile
** LaTeX term **
Any command which expanded result changes by an argument.
Opposite is a robust command.

robust
** LaTeX term **
Commands which expanded results are always the same.
Font type/size selection commands, length commands, and most commands
used within math mode is robust.
(maketitle type commands that don't take any arguments)

protect
\protect `a fragile command'
Commands that the result changes according to it's arguments are
called "fragile commands".  When an argument is referenced in more
than one place, the command is said to "take a moving argument".
chapter and caption, whose argument will be used in the table of
contents, or an @ in an tabular/array environment are examples.

When a "fragile command" is used in a "moving argument", it must be
preceded by a \protect.  Following is an example.

\newcommand{\thissystem}[1]{YaTeX version #1}
\chapter{About \protect \thissystem{1.50}}

newcommand
\newcommand{\NAME}[ARGS]{DEF}
Define a macro \NAME as DEF, taking ARGS number of arguments.  The nth
argument will be referred as #n in the definition.
If used as
	\newcommand{\foo}[1]{\underline{#1}}
\foo{bar} will be expanded to \underline{bar}.  When a font selection
command is used as
	\newcommand{\foo}[1]{\bf #1}
\foo{bar} will be expanded as \bf bar in the text, so, it must be used as
	\newcommand{\foo}[1]{{\bf #1}}

If NAME is already defined as a macro, it will return an error.  To
redefine, use \renewcommand.

renewcommand
\renewcommand{\NAME}[ARGS]{DEF}
Redefine an already defined command.
<refer newcommand>

newenvironment
\newenvironment{NAME}[ARGS]{DEF1}{DEF2}
Define a new environment.
\begin{NAME} will be replaced by DEF1 and \end{NAME} will be replaced
by DEF2.  Same as
	\newcommand{\NAME}{DEF1} \def{\end{\NAME}}{DEF2}

renewenvironment
\renewenvironment{NAME}[ARGS]{DEF1}{DEF2}
Redefine an environment NAME that already exists.
<refer newenvironment>

typeout
\typeout{MESSAGE}
Output MESSAGE to the terminal while typesetting.

typein
\typein{MESSAGE}	\typein[\MACRO]{MESSAGE}
Output MESSAGE to terminal and execute the input.
In the second form, \MACRO will be defined as the input.

par
\par
Used to separate paragraphs.  Same as a blank line.

everypar
\everypar
RTFM

nopagebreak
\nopagebreak[i]		(i = 0,1,2,3,4)
Prevents pages to be broken by the strength of i.  (default is 4)

pagebreak
\pagebreak[i]		(i = 0,1,2,3,4)
Forces pages to be broken by the strength of i.  (default is 4)

linebreak
\linebreak[i]		(i = 0,1,2,3,4)
Forces lines to be broken by the strength of i.  (default is 4)

nolinebreak
\nolinebreak[i]		(i = 0,1,2,3,4)
Prevents lines to be broken by the strength of i.  (default is 4)

samepage
\samepage
Prevents page to be broken.
RTFM

obeycr
\obeycr
Define <CR> as \\.  see \restorecr

restorecr
\restorecr
Restore <CR>'s definition changed by \obeycr.

\
\\		\\[LENGTH]

Breaks a line at any given point.  Same as \newline if used within a
paragraph.  If an option argument LENGTH is given, vertical space to
next line will be \vspace{LENGTH}.

addvspace
\addvspace{SKIP}
Adds space equal to SKIP to vertical space.  If more than one values
are given as \addvspace{S1} \addvspace{S2}, it will be the same as
\addvspace{the larger of S1, S2}.

vspace
\vspace{LENGTH}		\vspace*{LENGTH}
Adds vertical space of LENGTH.
\vspace* will add space at any given position, but \vspace will not
add at beginning or end of a page.

vspace*
\vspace{LENGTH}		\vspace*{LENGTH}
Adds vertical space of LENGTH.
\vspace* will add space at any given position, but \vspace will not
add at beginning or end of a page.

hspace
\hspace{LENGTH}		\hspace*{LENGTH}
Adds horizontal space of LENGTH.
\hspace* will add space at any given position, but \hspace will not add
at beginning or end of a line.

hspace*
\hspace{LENGTH}		\hspace*{LENGTH}
Adds horizontal space of LENGTH.
\hspace* will add space at any given position, but \hspace will not add
at beginning or end of a line.

smallskip
\smallskip
Put a small vertical space.
\def\smallskip{\vspace\smallskipamount}

medskip
\medskip
Put a medium vertical space.
\def\medskip{\vspace\medskipamount}

bigskip
\bigskip
Put a big vertical skip.
\def\bigskip{\vspace\bigskipamount}

,
\,
Opens a thin space.  Can be used in paragraph mode, LR mode, or math mode.
Used to write a quote within a quote.
example: ``\,`Foo', he said.''
Spaces that can be used in math mode are:
	\:	medium space
	\!	negative and thin space
	\;	thick space

:
$\:$
Medium space.  Math mode only.

!
$\!$
Negative thin space.  Math mode only.

;
$\;$
Thick space.  Math mode only.

whiledo{TEST}{BODY}
Repeat BODY while TEST is true.

nofiles
\nofiles
If \nofiles is in the preamble, .aux, .idx, .lof, .lot, .toc files will
not be made.

includeonly
\includeonly{sub1}	\includeonly{sub1,sub3}
Appoints actual files to be read and processed by \include{}.  (.tex can
be suppressed)
Files not given in the argument list of \includeonly will not be
processed at all.  If the file has been processed before, it will be
treated as if there were no changes from then.

include
\include{FILE}
Same as
\clearpage \input{FILE} \clearpage

input
\input{FILE}
Process as if FILE.tex has been inserted at that point.

setcounter
\setcounter{FOO}{VAL}
Set counter FOO's value to VAL.

<refer How to Introduce new counter>

addtocounter
\addtocounter{FOO}{VAL}
Add value VAL to counter FOO.

<refer How to Introduce new counter>

newcounter
\newcounter{COUNTER}[OLDCTR]
Defines a new counter COUNTER.
If an optional argument OLDCTR is given, COUNTER's value will be reset
every time OLDCTR's value is changed by \stepcounter or \addtocounter.

<refer How to Introduce new counter>

How to Introduce new counter
You'll get `Question n.' increasing n with \mondai, by setting as below.

\newcounter{toi}
\renewcommand{\thetoi}{Question \arabic{toi}.~ }
\setcounter{toi}{0}
\newcommand{\mondai}{\refstepcounter{toi}\thetoi}

value
\value{COUNTER}
Returns value of COUNTER.  Must not be preceded by \protect.

stepcounter
\stepcounter{FOO}
Increments value of counter FOO.  Also resets any counter dependent to FOO.

refstepcounter
\refstepcounter{FOO}
Increments value of counter FOO.  Also resets any counter dependent to
FOO.  Defers with \stepcounter as; if \label{hoge} follows immediately
after \refstepcounter{FOO}, \ref{hoge}'s value will be set to \value{FOO}.

arabic
\arabic{COUNTER}
Output COUNTER's value in arabic numerals.

roman
\roman{COUNTER}
Output COUNTER's value in lower case roman numerals.

Roman
\Roman{COUNTER}
Output COUNTER's value in upper case roman numerals.

alph
\alph{COUNTER}
Output COUNTER's value in lower case alphabet.

Alph
\Alph{COUNTER}
Output COUNTER's value in upper case alphabet.

fnsymbol
\fnsymbol{COUNTER}
Output COUNTER's value in footnote symbols (1 = *, 2 = \dagger, ...).
Math mode only.

label
\label{LABEL}
Set value of LABEL to \ref VALUE.
This value is referred by \ref{VALUE}.  \pageref{LABEL} refers to the
page number \label{LABEL} exists. 
``\ref VALUEs'' are, section commands as \section, \item commands within
an enumerate environment, values set by a theorem environment.  For
example, immediately after a \item of a enumerate environment, the item
number will be the ``\ref VALUE''.  \label{LABEL} will set the item
number to LABEL.

ref
\ref{LABEL}
Refer to LABEL's value set by \label{LABEL}.
Examples of values returned are; page numbers for LABELs set in the main
text, table numbers for LABELs set in a table, and the item number for
LABELs set in an item of the enumerate environment.

pageref
\pageref{LABEL}
Refer to the page number where \label{LABEL} exists.

(
\( EQUATION \)
Produce an in-text equation.
Same as
\begin{math} EQUATION \end{math}
\( and \) are fragile.

)
\( x^2 = 4 \)
Produce an in-text equation.
Same as
\begin{math} EQUATION \end{math}
\( and \) are fragile.

[
\[ EQUATION \]
Produce an equation in display mode.
Same as 
\begin{displaymath} EQUATION \end{displaymath}
\[ and \] are fragile.

)
\[ EQUATION \]
Produce an equation in display mode.
Same as 
\begin{displaymath} EQUATION \end{displaymath}
\[ and \] are fragile.

equation
\begin{equation} EQUATION \end{equation}
Produce a numbered equation in displaymath mode.

eqnarray
\begin{eqnarray} EQNS \end{eqnarray}
Produce equations aligned in three columns. The columns are separated by
& as ``left member & sign & right member''.  For example,
\begin{eqnarray}
 3x + 2y & = & 4 \\
  x - 4y & = & -5
\end{eqnarray}

eqnarray*
\begin{eqnarray*} EQNS \end{eqnarray*}
Same as eqnarray, except no equation numbers are produced.

frac
\frac{NUMER}{DENOM}
Produce a fraction as
 NUMER
------ 
 DENOM
Same as {NUMER \over DENOM}

sqrt
\sqrt[N]{EQUATION}
Produces the Nth power of EQUATION.  Gives a square root if [N] is not given.

lefteqn
\lefteqn{EQUATION}
In display math mode, presume EQUATION has zero width and print it flush left.
Used in eqnarray environment when the left member is too long and needs
folding.
\begin{eqnarray}
 \lefteqn{a_1 + a_2 + \cdots + a_n =} \\
 	&	&	a_1 + b_1 + \cdots + z_1 + \\
 	&	&	b_2 + c+2 + \cdost + z_2
\end{eqnarray}

center
\begin{center} TEXT \end{center}
Center TEXT.  Each line must be separated by \\.
<refer \centering>

flushright
\begin{flushright} TEXT \end{flushright}
Align end of each line with right margin.  Each line must be separated by \\.
<refer \raggedright>

flushleft
\begin{flushleft} TEXT \end{flushleft}
Align start of each line with left margin.  \\ can be given to decide
point of line break.  Otherwise lines will be broken at an appropriate
length.
<refer \raggedleft>

centering
\centering 
Produce a centered paragraph.
Declared at the beginning of a table/figura environment, it will center
until the end of the environment.

raggedright
\raggedright
Produce flush-left paragraphs.

raggedleft
\raggedleft
Produce flush-right paragraphs.

raggedbottom
\raggedbottom
Allow height of each page to vary.
Declared in the preamble.
<refer \flushbottom>

flushbottom
\flushbottom
Make all text pages the same height.
Declared in the preamble.
<refer \raggedbottom>

sloppy
\sloppy
Always breaks the line at the right-hand margin, but allows too much
space between words.
<refer \fussy>

fussy
\fussy
Return to normal line breaking.
<refer \sloppy>

sloppypar
\begin{sloppypar} PARAGRAPH \end{sloppypar}
Produce PARAGRAPH in \sloppy.
<refer \sloppy>

verbatim
\begin{verbatim} ... \end{verbatim}
The verbatim environment uses the fixed-width \tt font, turns blanks into 
spaces, starts a new line for each carriage return (or sequence of 
consecutive carriage returns), and interprets EVERY character literally.
I.e., all special characters \, {, $, etc. are \catcode'd to 'other'.

verbatim*
\begin{verbatim*} ... \end{verbatim*}
The verbatim* environment is the same to verbatim, except that spaces
print as the TeXbook's space character instead of as blank spaces.
<refer verbatim>

list
\begin{list}{LABEL}{PARAMETER} ... \end{list}
Enter list environment.  Each \item will be listed with an indent.
First argument gives the default label when \item's optional argument is
omitted. Second argument gives parameters to be processed for each item.
example:
\begin{list}%
 {$\diamond$}
 {\addtolength{\leftmargin}{4em}}
 \item First argument is the default label when \verb|\item|'s optional
	   argument is given.
 \item Second argument will be processed for each item.
 \item[*] If a optional argument is given such as this, it will be the label.
\end{list}

  Variables to control the list environment are as follow; (default value)
horizontal:
<refer variables to control list environment>

variables to control list environment
\labelwidth	width of label
\labelsep	space between right of label and text of first item
\leftmargin	left margin within list environment
\rightmargin	right margin within list environment (0pt)
\itemindent	width of indent preceding item (0pt)
\linewidth	width of line
\listparindent	indent for each paragraph (except first paragraph with \item)
                (0pt)

vertical:
\topsep		space between last paragraph before list environment and
            first item
\partopsep	space added to \topsep when starting a new paragraph in list
            environment
\itemsep	space between successive items
\parsep		space between paragraphs within the same item

itemize
\begin{itemize} \item ITEM1 ... \item ITEMn \end{itemize}
Produce a bulleted list.
Can be nested to four levels.
``bullets'' shown at top of each item of the four levels are controlled
by \labelitemi, \labelitemii, \labelitemiii, \labelitemiv.

Variables to control the itemize environment are;
<refer variables to control list environment>

enumerate
\begin{enumerate} \item ITEM1 ... \item ITEMn \end{enumerate}
Produce a numbered list.
Can be nested to four levels.
Numbers for items on each level are held in enumi, enumii, enumiii, enumiv.
Each item's label are produced by \labelenumi, ..., \labelenumiv.
\p@enumN\theenumN will set \ref's value.  (N is the depth of level.
refer \ref for value of \ref)
For example, if declared
\def\theenumii{\alph{enumii}}
\def\p@enumii{\theenumi\theenumii}
\def\labelenumii{(\theenumii)}
\ref's value will be 3a.

Variables to control enumerate environment are,
<refer variables to control list environment>

item
\item			\item[LABEL]
Start an item in itemize, enumerate, description environment.
Output LABEL if [LABEL] is given.

description
\begin{description} \item[LABEL] CONTENTS ... \end{description}
Produce [LABEL] as a label.

subitem
\subitem ITEM
Define a subitem.

subsubitem
\subsubitem ITEM
Define a subsubitem.

makebox
\makebox[WID][POS]{OBJECT}	\makebox(X,Y)[POS]{OBJECT}
First form will place OBJECT at position POS and width WID in a \box.
For POS, object will be placed flush-left if `l', flush-right if `r', 
splattering words in the same space if `s', and centered if nothing is given
in the second form, object will be placed in a \hbox sized (X,Y) (in
\unitlength) within a picture environment.  POS is the same as the first form.



mbox
\mbox{OBJECT}
Same as \makebox{OBJECT}.

newsavebox
\newsavebox{\CMD}
Define a new box saving command.  \CMD is used in a \savebox command to
save boxes.  Commands defined by \newsavebox are always global.

savebox
\savebox{\CMD}{TEXT}
Save results of TEXT in \CMD to be boxed.
TEXT is the same as the argument of \makebox, but the results of
processing TEXT is not displayed in-place.  Boxes processed by
\usebox{\CMD} will be placed.

sbox
\sbox{\CMD}{TEXT}
Same as \savebox.  \sbox is robust, and \savebox is fragile.

framebox
\framebox[WID][POS]{OBJECT}	\framebox(X,Y)[POS]{OBJECT}
Do the same thing as \makebox with a frame.
The frame's width and space between the object are decided by \framerule
and \framesep.  If used as \framebox(X,Y){OBJECT} in a picture
environment, width of frame will be dependant to the picture
environment's line width, and space between the object and frame can not
be opened.

fbox
\fbox{OBJECT}
Same as \framebox{OBJECT}.
\fbox is robust, \framebox fragile.

Rule width of \fbox can be controled by setting \fboxrule

  {
    \fboxrule=2\fboxrule
    \fbox{contents of double width of rule}
  }

parbox
\parbox[POS]{WIDTH}{TEXT}
Make a box of width WIDTH using TEXT.  The box's position by POS is;
c : centering (default)
b : bottom of box matches present text
t : top of box matches present text

In \parbox, parameters will be reset as;
\parskip          = 0pt
\linewidth        = \hsize
\@totalleftmargin = 0pt
\leftskip         = 0pt
\rightskip        = 0pt
\@rightskip       = 0pt
\parfillskip      = 0pt plus 1fil
\lineskip         = \normallineskip
\baselineskip     = \normalbaselineskip

minipage
\begin{minipage}[pos]{WIDTH}  TEXT   \end{minipage}
Make a box of width WIDTH using TEXT as \parbox.  The box's position by
POS is; 
c : centering (default)
b : bottom of box matches present text
t : top of box matches present text
TEXT will be processed as a normal paragraph, differing from \parbox.

rule
\rule[RAISED]{WIDTH}{HEIGHT}
Make a rule of WIDTH x HEIGHT.  If RAISED is given, will be raised that
amount.

underline
\underline{TEXT}
Underline TEXT.

raisebox
\raisebox{DISTANCE}[HEIGHT][DEPTH]{BOX}
Raise BOX by DISTANCE.
If HEIGHT and DEPTH are given, TeX will take it as the height and depth
of the box.
(see TeXBook for more info)

tabbing
\begin{tabbing} \= text1.1 \= text1.2 \\ \> text2.1 \> text2.2 \end{tabbing}
Creates an environment of aligned columns (nesting allowed).  For example,
\begin{tabbing}
 \= ITEM1 \hspace*{2em} \= ITEM2 \hspace*{3em}	\= ITEM3 \\
 \> aabbcc		\> ddeeff		\> gghhii \+ \\
 			\> jjkkll		\> mmnnoo \\
			\> ppqqrr \- \\
 \> ssttuu		\> vvwwxx		\> yyzzzz
\end{tabbing}
will be processed with three tab stops as,
  (1st item)   (2nd item)     (3rd item)
   aabbcc      ddeeff      gghhii
               jjkkll      mmnnoo
               ppqqrr
   ssttuu      vvwwxx      yyzzzz
         \2em/       \3em/
Commands to control the tabbing environment are; (n starts from 1)
\=	Sets the nth tab stop position to the current position and increment
    the tab counter (n) by 1.
\\	Start a new line and reset the tab counter (n=1)
\>	Set the position to the nth tab stop and increment the tab counter by 1.
\+	Add 1 to the next line's tab counter's initial value.  If written as
    \+ \\, the next line's \> will give the position of the second tab
    stop.  Multiple \+ will accumulate tab counter's initial value.

\-	Reverse of \+.  Decrease initial value of tab counter for next line
    by 1.
\<	Decrease value of tab counter by 1 and set the tab stop.  Can be
    only used at the beginning of a line.
\'	Output at a position \tabbinsep right from the normal tab stop.
\`	Output remaining text flush-right.
\pushtabs Push all tab stop positions being used.
\poptabs  Push all tab stop positions being used. \pushtabs and \poptabs
          must be used in pairs.  Nesting allowed.
\aX	In a tabbing environment, accents are produced by \a=, \a', \a`
\kill	Without outputting text, parse tabbing definition.

array
\begin{array}{PREAMBLE} C1 & C2 & .. & Cn \\ D1 ... \end{array}
Make a mathematical array.  Useful to make matrix.
See the help of `tabular' for detailed description.

tabular
\begin{tabular}[OPT]{PREAMBLE} C1 & C2 & .. & Cn \\ D1 ... \end{tabular}
Make tabular.
[[OPT]]
[t]		Align the top of tabular to the line.
[b]		Align the bottom of tabular to the line.
[[PREAMBLE]]
  l,r,c  : indicate where entry is to be placed.
  |      : for vertical rule
  @{EXP} : inserts the text EXP in every column.  \arraycolsep or \tabcolsep
           spacing is suppressed.
  *{N}{PRE} : equivalent to writing N copies of PRE in the preamble.  PRE
              may contain *{N'}{EXP'} expressions.
  p{LEN} : makes entry in parbox of width LEN.  This is useful when
	   each column contains long sentences.

[[Usable commands in array, tabular environment]]
\multicolumn
<refer multicolumn>
\vline
<refer vline>
\hline
<refer hline>
\cline{i-j}
<refer cline>
\extracolsep{W}
<refer extracolsep>


See below as an example.

\LaTeX Expression				Printed image
\begin{array}{ccr}
 x+y+z	& a_1	&  1 \\				x+y+z  a1    1
 x+z	& a_2	&  21 \\			 x+z   a2   21
 y	& a_3	&  321				  y    a3  321
\end{array}

\[ \left(
 \begin{array}{cccc}
  a_{11}  & a_{12}  & \dots & a_{1n} \\		/ a11 a12 ... a1n \
  a_{21}  & a_{22}  & \dots & a_{2n} \\		| a21 a22 ... a2n |
  \vdots  & \vdots  & \ddots& \vdots \\		|  :   :  \.   :  |
  a_{n1}  & a_{n2}  & \dots & a_{nn}		\ an1 an2 ..: ann /
 \end{array} 
\right)\]

\begin{tabular}{lp{0.7\textwidth}
 \hline						----------------------------
 \verb|.|	& Period matches with		.  Period matches with any
		  any single character.\\	   single character.
 \verb|*|	& Asterisk matches with		*  Asterisk matches with 0
		  0 or more  repetition	   	   or  more repetition  of 
		  of preceding regexp.	   	   preceding regexp.
\\ \hline					----------------------------
\end{tabular}

(End of example)

\right(, \left) or \right{, left} or \right[, \left] or \right|, \left|
can enclose whole of array environment by parentheses, braces, brackets,
norm respectively.  The number of `\right's and `\left's should be the
same, but the type of parentheses don't have to match like
\right( \left].  `\right.' produces the invisible parenthesis.

\[ Ans. \cdots \left\{					 /
	  \begin{array}{ccc}				 |  x = 5
	   x & = & 5 \\				Ans. ...<
   	   y & = & 3					 |  y = 3
	  \end{array} \right. \]			 \

Here are the style parameters for the tabular environment.
\arraycolsep    : half the width separating columns in an array environment
\tabcolsep      : half the width separating columns in a tabular environment
\arrayrulewidth : width of rules
\doublerulesep  : space between adjacent rules in array or tabular
\arraystretch   : line spacing in array and tabular environments is done by
                  placing a strut in every row of height and depth 
                  \arraystretch times the height and depth of the strut
                  produced by an ordinary \strut command.

Tabular environment cannot spread across pages.  `supertabular.sty'
allows this.

tabular*
\begin{tabular*}{WIDTH}{PREAMBLE} ... \end{tabular*}
Make tabular environment with specifying its width.
To fill this width, use \extracolsep{} of preamble as below:
\begin{tabular*}{10em}[b]{|c@{\extracolsep{\fill}}|c|c|}
 \hline
 a & b & c \\ \hline
 1 & 2 & 3
\end{tabular*}
See also tabular.

multicolumn
\multicolumn{N}{FORMAT}{ITEM}
In tabular environment,
replaces the next N column items by
ITEM, formatted according to FORMAT.  FORMAT should contain at most
one l,r or c.  If it contains none, then ITEM is ignored.

vline
\vline
In tabular environment,
draws a vertical line the height of the current row.  May
appear in an array element entry.


hline
\hline
In tabular environment draws a horizontal line between rows.  Must
appear either before the first entry (to appear above the first row) or
right after a \\ command.  If followed by another \hline, then adds a
\vskip of \doublerulesep.

cline
\cline{i-j}
In tabular environment,
draws horizontal lines between rows covering columns
i through j, inclusive.  Multiple commands may follow
one another to provide lines covering several disjoint
columns

extracolsep
\extracolsep{W}
for use inside an @ in the preamble.  Causes a WIDTH
space to be added between columns for the rest of the 
columns.  This is in addition to the ordinary intercolumn 
space.

picture
\begin{picture}(WIDTH,HEIGHT)(X,Y) ..contents.. \end{picture}
The picture  environment  allows you to create  just about any kind of
picture you want containing text, lines, arrows and circles.  You tell
LaTeX  where  to  put  things  in  the  picture  by  specifying  their
coordinates.   A coordinate  is a number that may have a decimal point
and a minus  sign  - a number  like  5, 2.3 or -3.1416.   A coordinate
specifies a length in multiples of the unit length \unitlength,  so if
\unitlength  has been set to 1cm, then the coordinate 2.54 specifies a
length of 2.54 centimeters.   You can change  the value of \unitlength
anywhere  you want, using the \setlength  command,  but strange things
will happen if you try changing it inside the picture environment.

A position is a pair of coordinates,  such as (2.4,-5), specifying the
point  with x-coordinate  2.4 and y-coordinate  -5.   Coordinates  are
specified  in the  usual  way  with  respect  to an origin,  which  is
normally  at the lower-left  corner of the picture.   Note that when a
position  appears as an argument,  it is not enclosed  in braces;  the
parentheses serve to delimit the argument.

The  picture  environment  has  one  mandatory  argument,  which  is a
position.   It specifies  the size  of the picture.   The  environment
produces  a rectangular  box with width and height determined  by this
argument's x- and y-coordinates.

The  picture  environment  also  has  an optional  position  argument,
following  the size argument,  that  can change  the origin.   (Unlike
ordinary optional arguments,  this argument is not contained in square
brackets.) The optional argument gives the coordinates of the point at
the lower-left corner of the picture (thereby determining the origin). 
For example, if \unitlength has been set to 1mm, the command

\begin{picture}(100,200)(10,20)

produces   a  picture   of  width  100  millimeters   and  height  200
millimeters,  whose lower-left  corner is the point (10,20)  and whose
upper-right  corner is therefore the point (110,220).   When you first
draw a picture,  you will  omit  the optional  argument,  leaving  the
origin  at the lower-left  corner.   If you then want  to modify  your
picture by shifting everything, you just add the appropriate  optional
argument.

The environment's  mandatory  argument determines  the nominal size of
the picture.   This need  bear  no relation  to how large  the picture
really  is; LaTeX will happily  allow  you to put things  outside  the
picture, or even off the page.  The picture's  nominal size is used by
TeX in determining how much room to leave for it.

Everything that appears in a picture is drawn by the \put command. The
command

\put (11.3,-.3){...}

puts the object specified  by "..." in the picture, with its reference
point at coordinates  (11.3,-.3).   The reference  points  for various
objects will be described below.

The \put command creates an LR box.  You can put anything  in the text
argument  of the \put command  that you'd put into the argument  of an
\mbox and related  commands.   When you do this,  the reference  point
will be the lower left corner of the box.

Picture environment is obsolete I thinks, so show only commands.

[[COMMANDS]]
\put(X,Y){OBJECT}
\multiput(X,Y)(dX,dY){REPEAT}{OBJECT}
[[OBJECTS]]
\makebox(X,Y)[POS]{TEXT}
\framebox(X,Y)[POS]{TEXT}
\dashbox(X,Y)[POS]{TEXT}
(POS = l, r, b, t)
\line(dX,dY){HorizontalLength}
\vector(dX,dY){HorizontalLength}		(arrow)
(dX,dY = +-1, +-2, ..., +-6)
\shortstack[POS]{FIRST\\SECOND\\THIRD...}
\circle{DIAMETER}
\circle*{DIAMETER}				(Filled circle)
(Maximum diameters are 40pt, 15pt)
\oval(Dia-X,DiaY)[POS]				(Oval POS = l, r, t, b)
\frame{OBJECT}
\thinlines, \thicklines				(choose line thickness)
\linethickness{THICKNESS}

newtheorem
\newtheorem{NAME}{TEXT}[COUNTER]	\newtheorem{NAME}[OLDNAME]{TEXT} 
This defines the environment NAME to be just as one would expect a 
theorem environment to be, except that it prints ``TEXT'' instead of 
``Theorem''.  

If OLDNAME is given, then environments NAME and OLDNAME use the same 
counter, so using a NAME environment advances the number of the next 
NAME environment, and vice-versa.

If COUNTER is given, then environment NAME is numbered within COUNTER.
E.g., if COUNTER = subsection, then the first NAME in subsection 7.2
is numbered TEXT 7.2.1.

The way NAME environments are numbered can be changed by redefining
\theNAME.

title
\title{TITLE}
Define the title of the document.

author
\author{AUTHOR}
Declare the author of the document.

date
\date{DATE}
Define the date of document which is used by \maketitle.
Omitting DATE produces current date.

thanks
\thanks{FOOTNOTE}
Output a footnote in title page.

maketitle
\maketitle
Output a title.  Should be written in document environment.
Here are the constituents of title page.
\title{TITLE}
\author{AUTHOR}
\date{DATE}		(If DATE omitted, output the date of typesetting)
\thanks{NOTE}		(Output a thanks message or the post of the author)

part
\part{TITLE}
Start a new part whose title is TITLE.
<refer chapter>

chapter
\chapter{TITLE}
Start a chapter whose title is TITLE.
Sectioning commands:
\part			Part ?
\chapter		Chapter ?	(not available in `article.sty')
\section		?
\subsection		?.?
\subsubsection		?.?.?
\paragraph		***
\subparagraph		===

section
\section{TITLE}
Start a section whose title is TITLE.
<refer chapter>

subsection
\subsection{TITLE}
Start a subsection whose title is TITLE.
<refer chapter>

subsubsection
\subsubsection{TITLE}
Start a paragraph whose title is TITLE.
<refer chapter>

paragraph
\paragraph{TITLE}
Start a paragraph whose title is TITLE.
<refer chapter

subparagraph
\subparagraph{TITLE}
Start a subparagraph whose title is TITLE.
<refer chapter>

appendix
\appendix
Declare the beginning of appendix.
Change the numbering fashion to appendix oriented.

contentsline
\contentsline{TYPE}{ENTRY}{PAGE}
\contentsline{subsection}{\makebox{30pt}[r]{1.4.3} Gnats and Gnus}{22}
Macro to produce a TYPE entry in a table of contents, etc.
It will appear in the .TOC or other file.  For example,
The entry for subsection 1.4.3 in the table of contents might
be produced by:
\contentsline{subsection}{\makebox{30pt}[r]{1.4.3} Gnats and Gnus}{22}
The \protect command causes command sequences to be written
without expanding them.

addcontentsline
\addcontentsline{TABLE}{TYPE}{ENTRY}
User command for adding his own entry to a table of contents, etc.
It adds the entry
   \contentsline{TYPE}{ENTRY}{page}
to the .TABLE file.

addtocontents
\addtocontents{TABLE}{TEXT}
Adds TEXT to the .TABLE file, with no page number.

index
\index{INDEX}
Create an entry of index.


glossary
\glossary{STRING}
Create an entry of glossary.

makeindex
\makeindex
Writes \indexentry to .idx file.
Should be in preamble.

makeglossary
\makeglossary
Writes \glossaryentry to .glo file.
Should be in preamble.

bibliography
\bibliography{FILE1,FILE2, ... ,FILEn}
Specifies the bibdata files.

bibliographystyle
\bibliographystyle{STYLE}
Style of numbering of bibliographies.
plain	normal
unsrt	without sorting
alpha	gives tag like "Foo94"
abbrv	omit the first name of author, publishing month, book title

thebibliography
\begin{thebibliography}{LONGEST-LABEL} \bibitem{ITEM},... \end{thebibliography}
The thebibliography environment is a list environment.  To save the
use of an extra counter, it should use  enumiv  as the item counter.
Instead of using \item, items in the bibliography are produced by the 
\bibitem command.
LONGEST-LABEL is a dummy string to notify the maximum width of label.
---
<refer bibitem>

bibitem
\bibitem{NAME}			\bibitem[LABEL]{NAME}
Produces a numbered (as [1], [2],...) entry cited as NAME.
Second form produces an entry labeled by LABEL and cited as NAME.

thefootnote
In usual LaTeX style, produces the footnote number.
If footnotes are to be numbered within pages, then the 
document style file must include an \@addtoreset command 
to cause the footnote counter to be reset when the page 
counter is stepped.  This is not a good idea, though,
because the counter will not always be reset in time
to ensure that the first footnote on a page is footnote
number one.  

footnote
\footnote{NOTE}   or   \footnote[NUM]{NOTE}
User command to insert a footnote.
In second form, insert a footnote numbered
NUM, where NUM is a number -- 1, 2,
etc.  For example, if footnotes are numbered
*, **, etc. within pages, then \footnote[2]{...}
produces footnote '**'.  This command does not
step the footnote counter.

If you want footnote number as marks, define as follows in preamble;
\renewcommand{\thefootnote}{\fnsymbol{footnote}}

The next definition produces dagger marks followed by sequential number.
\renewcommand{\thefootnote}{$\dagger$\arabic{footnote}}
(fragile)

footnotemark
\footnotemark[NUM]
Command to produce just the footnote mark in
the text, but no footnote.  With no argument,
it steps the footnote counter before generating
the mark.

footnotetext
\footnotetext[NUM]{TEXT}
Command to produce the footnote but no  mark.
\footnote is equivalent to \footnotemark \footnotetext .

footnotesize
{\footnotesize ...}
Size-changing command for footnotes.

footnotesep
\footnotesep
The height of a strut placed at the beginning of every footnote.

footnoterule
\footnoterule
Macro to draw the rule separating footnotes from text.
It is executed right after a \vspace of \skip\footins.
It should take zero vertical space--i.e., it should to
a negative skip to compensate for any positive space
it occupies.  (See PLAIN.TEX.)

documentstyle
\documentstyle[OPTION1,OPTION2, ... ,OPTIONn]{STYLE}
The user starts one's file with the command as above
which loads the OPTION's respectively and \input's the file STYLE.sty.

documentclass
\documentclass[OPTION1,OPTION2, ... ,OPTIONn]{STYLE}
In LaTeX2e, user starts one's file with the command as above
which loads the OPTION's respectively and \input's the file STYLE.cls.

usepackage
\usepackage[OPTIONS]{PACKAGE}
Use additional package `PACKAGE' with option `OPTION'.

verb
\verb#CONTENTS#
The command \verb produces in-line verbatim text, where the argument
is delimited by any pair of characters.  E.g., \verb #...# takes
'...' as its argument, and sets it verbatim in \tt font.

The *-variants of these commands is the same, except that spaces
print as the TeXbook's space character instead of as blank spaces.

styleparameter

topfigrule
\topfigrule
Command to place rule (or whatever) between floats
at top of page and text.  Executed in inner vertical
mode right before the \textfloatsep skip separating
the floats from the text.  Must occupy zero vertical
space.  (See \footnoterule.)

botfigrule
\setlength{\botfigrule}{LENGTH}
Same as \topfigrule, but put after the \textfloatsep
skip separating text from the floats at bottom of page.

intextsep
\setlength{\intextsep}{LENGTH}
Space left on top and bottom of an in-text float.

newpage
\newpage
Advance to a new page.
\clearpage 		Output the unfinished table of images, if any,
			and clear page.
\cleardoublepage 	Same as \clearpage except that when spread style
			(such as book), start a new page with odd page.
\newpage		Finish current column when twocolumn.

clearpage
\clearpage 
<refer newpage>

cleardoublepage
\cleardoublepage 
<refer newpage>

length

Here are the available units of length in TeX.
cm		centi meter
em		width of `M'
ex		height of `x'
in		inch (=2.54cm)
mm		mi.li meter
pc		pica(=12pt)
pt		point (72.27pt=1 inch)
\fill		Freely extendable length whose normal length is 0
\stretch{X}	X-times as long as \fill

stretch
\stretch{X}
<refer length>

twocolumn
\twocolumn[STRING]
Clear page and start two-column typesetting.
Optional argument [STRING] specifies the page-acrossing title.

If you want to output one-column title page with two-column body,
describe like this;
\twocolumn[
\begin{titlepage}
{\LARGE YourTitle}
\vspace*{1em}
\begin{abstract} Your Abstract blah blah... \end{abstract}
\end{titlepage}
]

->onecolumn

onecolumn
\onecolumn
Clear page and start one-column typesetting.
->twocolumn

topnewpage
\topnewpage{BOX}
Begin a new page and create the parbox-ed BOX whose width is \textwidth.
This is useful to make a page-acrossing title in a twocolumn page.

breakbox
\begin{breakbox} ... \end{breakbox}
Make a surrounding frame extended across pages.
Useful for cite a long program list.
Requires `\usepackage{eclbkbox}'

verbfile
\verbfile{FILE}
Include a FILE in verbatim format.
Requires `\usepackage{misc}'
See also \listing

listing
\listing{FILE}
Include a FILE in verbatim format with line number.
Requires `\usepackage{misc}'
See also \verbfile

ascmac
\usepackage{ascmac}
The `ascmac' package provides
* \boxnote environment		notebook-like box
* \screen environment		corner-rounded box suitable for screen output
* \itembox environment		itemizing box
* \shadebox environment		shaded box
* \keytop macro			keytop
* \yen				Yen mark
* \return-key
* \mask, \maskbox

boxnote
\begin{boxnote} ... \end{boxnote}
Enclose with notebook-like square.
Defined in ascmac.sty.

<refer ascmac>

screen
\begin{screen} ... \end{screen}
Enclose with corner-rounded square which stands for screen output.
Requires `\usepackage{ascmac}'

<refere ascmac>

itembox
\begin{itembox}{ITEMSTRING} ... \end{itembox}
Enclose box with ITEMSTRING header.
Requires `\usepackage{ascmac}'
<refere ascmac>

shadebox
\begin{shadebox} ... \end{shadebox}
Enclose shaded box.
Requires `\usepackage{ascmac}'
<refere ascmac>

keytop
\keytop{KEY}
Output a keytop designed character.
Requires `\usepackage{ascmac}'
<refere ascmac>

mask
\mask{STRING}{MASKTYPE}
Make a masked STRING.  MASKTYPE is one of character A through K.

eg.) \mask{This is a pen!}{C}

Mask types are viewed at
http://www.yatex.org/help/ascmac-mask.jpg

Defined in `\usepackage{ascmac}'

<refere ascmac>

maskbox
\maskbox{WIDTH}{HEIGHT}{MASKTYPE}{POS}{STRING}
Make a masked box of WIDTH x HEIGHT which contains STRING located in POS.
Masking type MASKTYPE is one of character A through K.

eg.) \maskbox{5cm}{2.5em}{G}{c}{Year!}

Mask types are viewed at
http://www.yatex.org/help/ascmac-mask.jpg

Requires `\usepackage{ascmac}'
<refere ascmac>

alltt
\begin{alltt} ... \end{alltt}
An environment like verbatim except in which TeX macro can be used.

comment
\begin{comment} ... \end{comment}
Comment out enclosed environment.
But if \includeversion{comment} appears, enclosed part activated.
Putting \excludeversion{ENV} defines new environment ENV which
works equivalently to comment environment.

Requires `\usepackage{version}'

bou
\bou{STRING}
Put the emphasizing dot on each characters in STRING.

Requires `\usepackage{plext}'

url
\url{URL_STRING}
Put URL string with reasonable folding.

Requires `\usepackage{url}'

longtable
\begin{longtable}{POSSTRING} ... \end{longtable}
Same as table, but can be spreaded across pages.

Requires `\usepackage{longtable}'

fancybox
\usepackage{fancybox}
Provides some fancy boxes.
* \shadowbox{}
* \ovalbox{}
* \doublebox{}

shadowbox
\shadowbox{STRING}
Surround a STRING by shadow box.

Require `\usepackage{fancybox}`

<ref fancybox>

ovalbox
\ovalbox{STRING}
Surround a STRING by oval box

Require `\usepackage{fancybox}`

<ref fancybox>

Ovalbox
\Ovalbox{STRING}
Surround a STRING by thick oval box.

Require `\usepackage{fancybox}`

<ref fancybox>

doublebox
\doublebox{STRING}
Surround a STRING by double frame.

Require `\usepackage{fancybox}`

<ref fancybox>

quote
\begin{quote} ... \end{quote}
quotation without paragraph

quotation
\begin{quotation} ... \end{quotation}
quoted environment which might contains paragraphs

textcircled
\textcircled{CHAR}
Enclose `char' with small circle.  Because this circle is as large as one
character, you had better encolose `CHAR' with {\small ...}, {\tiny ...},
{\scriptsize ...}.

hfill
\hfill
Insert a space as wide as possible.  Same as \hspace{\fill}.

foo\hfill bar
produces;
        foo                                                     bar

foo\hfill bar\hfill baz
produces;
        foo                        bar                          baz

\hfill can't produce space at the beginning of the line because \hfill
is a kind of \hspace{}.  If you make right-justified world in a line,
write \hspace*{\fill}.

hfil
\hfil
Same as \hfill, but little bit weak.

vfill
\vfill
Make vertical space in utmost length , the same as \vspace{\fill}.
cf. \hfill

hrulefill
\hrulefill
Draw underline in utmost length.

backslashbox
\usepackage{slashbox}   \backslashbox{A}{B}
Draw a back-slash in a column of tabular.
\begin{tabular}
\hline
\backslashbox{A}{B} & hoge \\ \hline
\end{tabular}

     +----+--------+
     | \ B|        |
     | A\ |  hoge  |
     +----+--------+


slashbox
\slashbox{A}{B}
Draw long slash line in a column of tabular.
See also backslashbox.

ooalign
{\ooalign{String1\crcr String2...}
Set line spacing to zero and shift to double-strike mode.
This can be used for generating circled character.
Look this;

\newcommand{\maru}[1]{{\ooalign {\hfill$\scriptstyle#1$\hfill\crcr$\bigcirc$}}}

\crcr is the equivalent of \\ for tabulars.
Note that \ooalign change the spacing parameters.  So you should enclose
\ooalign itself with { }.

maru
\maru{R}
Circle one character.
Declare the \newcommand as below;
\newcommand{\maru}[1]{{\ooalign {\hfill$\scriptstyle#1$\hfill\crcr$\bigcirc$}}}

today
\date{\today}
Use this as the argument of \date{}.
Set the document's date in title to today.

NamedColor
\textcolor[named]{COLOR}{TEXT}, for example.
With `\usepackage{color}', you can use colors listed below.

GreenYellow Yellow Goldenrod Dandelion Apricot Peach Melon YellowOrange
Orange BurntOrange Bittersweet RedOrange Mahogany Maroon BrickRed Red
OrangeRed RubineRed WildStrawberry Salmon CarnationPink Magenta
VioletRed Rhodamine Mulberry RedViolet Fuchsia Lavender Thistle
OrchidDarkOrchid Purple Plum Violet RoyalPurple BlueViolet Periwinkle
CadetBlue CornflowerBlue MidnightBlue NavyBlue RoyalBlue Blue Cerulean
Cyan ProcessBlue SkyBlue Turquoise TealBlue Aquamarine BlueGreen Emerald
JungleGreen SeaGreen Green ForestGreen PineGreen LimeGreen YellowGreen
SpringGreen OliveGreen RawSienna Sepia Brown Tan Gray Black White)

See also http://www.yatex.org/help/color.tex

textcolor
\textcolor{COLOR}{TEXT}
Put the TEXT colored with COLOR.

<refer NamedColor>

pagecolor
\pagecolor{COLOR}
Set background color of the page to COLOR.

<refer NamedColor>

color
\color{COLOR}
Set text color of the page to COLOR.

<refer NamedColor>

colorbox
\colorbox{COLOR}{TEXT}
Put TEXT in the box whose background color is COLRO.

<refer NamedColor>

fcolorbox
\fcolorbox{FCOLOR}{BGCOLOR}{TEXT}
Put text int the box whose frame color is FCOLOR and background BGCOLOR.

<refer NamedColor>

rotatebox
\rotatebox{ANGLE}{TEXT}
Put TEXT with rotated by ANGLE-degrees, unclockwise.
Require `\usepackage{graphicx}'.

resizebox
\resizebox{WIDTH}{HEIGHT}{TEXT}
Put TEXT enlarging/shrinking to WIDTH and HEIGHT.
You can omit either of WIDHT or HEIGHT.  In that case, specify `!'.
\resizebox{!}{40mm}{TEXT} outputs TEXT with 40mm in height.
Require `\usepackage{graphicx}'.

scalebox
\scalebox{MAG}[V-MAG]{TEXT}
Put TEXT maginifiyng by MAG.  V-MAG for vertical magnification factor is
optional.  Negative values for magnification factor flip the TEXT
in that direction.

Require `\usepackage{graphicx}'.

reflectbox
\reflectbox{TEXT}
Flip TEXT horizontally.
Equivalent to \scalebox{-1}[1]{TEXT}.
Require `\usepackage{graphicx}'.

ulem
\usepackage{ulem}
\usepackage{ulem}
The `ulem' package provides macros listed below.
\uline{Underlined Text}
\uwave{Waved-Unlderlined Text}
\uuline{Double Underlined Text} 

(Information by TSUCHIYA Masatoshi <tsuchiya@pine.kuee.kyoto-u.ac.jp>)
uline
\uline{TEXT}
Put TEXT with underline.

<refer ulem>

uwave
\uwave{TEXT}
Put TEXT with waved underline.

<refer ulem>

uuline
\uuline{TEXT}
Put TEXT with double underline.

<refer ulem>
showkeys.sty
\usepackage[options]{showkeys}
In margin area, output `(?)' marks for unlabeled math-expressions,
`?label?' marks for unreferred labels.
Optional arguments are one of;
showrefs, norefs, showcites, nocites, msgs, nomsgs, chkunlbld,
ignoreunlbld.
msgs/nomsgs specifies whether output messages in  *.log file or not.

`\usepackage{showkeys}' should be located before the declaration
for AMS-LaTeX or HyperRef, if any.

Another style `refcheck.sty' can also output labeling information
including `\ref{***}' macros themselves.

(Information by Masaki Shigemori <mshige@ucla.edu>)

table*
\begin{table*} ... \end{table*}
Put tabular in one column at the top of page even if in twocolumn mode.

figure*
\begin{figure*} ... \end{figure*}
Put figure in one column at the top of page even if in twocolumn mode.
If you put figure bottom of page instead of top, use nidanfloat.sty
instead.
\begin{figure*}[b]
 \includegraphics{blahblahblah}
 \caption{foo bar baz}
\end{figure*}

includegraphics
\usepackage{graphicx}  ... \includegraphics[Options]{graphicfile.eps}
Include graphics$B!#(BRequires `graphicx' package.
Possible [Options] are as follows.
scale=X
width=W
height=H
draft     (Frame only)
angle=R
origin=RotationOrigin  (One of `c', `tl', `tr', `bl' or `br')
bb=llx lly urx ury    (Specify BoundingBox)
viewport=llx lly urx ury  (Rerative to BoundingBox)
trim=left bottom right top

abstract
\begin{abstract} ... \end{abstract}
Output abstract

\langle
$\langle$
         
`<' in math-modes.

\langle
$rlangle$
         
`>' in math-modes.

\slash
\slash
slash(/) itself.

\textbackslash
\textbackslash
backslash(\) itself.

YaTeX
(setq auto-mode-alist (cons '("\\.tex$" . yatex-mode) auto-mode-alist))
The mode you are probably using now.
Bells and whistles for using LaTeX at a breeze.

[pronunciation]
``ya-tek'' for programs as yatex.el, ``ya-cho'' when referring to the
whole system. ``ya-cho'' in Japanese stands for ``wild bird''


yatex
(setq auto-mode-alist (cons '("\\.tex$" . yatex-mode) auto-mode-alist))
<refer YaTeX>

